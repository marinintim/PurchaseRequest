// Generated by CoffeeScript 1.4.0
(function() {

  define("Models/CreditCard", function() {
    var CreditCard;
    CreditCard = Backbone.Model.extend({
      attributes: {
        number: "",
        cardholder: "",
        expiration_month: "",
        expiration_year: ""
      },
      validate: function(attributes) {
        var checkNumber, expire_date, number, today_date;
        if (attributes == null) {
          attributes = this.attributes;
        }
        if (!attributes) {
          return "Credit card fields are not filled";
        }
        if (!(attributes.expiration_month && attributes.expiration_year)) {
          return "Credit card: expiration date is incomplete";
        }
        if (!attributes.number) {
          return "Credit card: card number is empty";
        }
        if (!attributes.card_holder) {
          return "Credit card: cardholder is empty";
        }
        number = parseInt(this.attributes.number.split(" ").join(""), 10);
        checkNumber = function(number) {
          var length, luhn;
          length = number.length;
          luhn = function(number) {
            var ccard, i, sum, _i, _j, _len, _len1, _step;
            ccard = (function() {
              var _i, _ref, _results;
              _results = [];
              for (_i = 0, _ref = number.length; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--) {
                _results.push(0);
              }
              return _results;
            })();
            i = 0;
            sum = 0;
            for (_i = 0, _len = ccard.length; _i < _len; _i++) {
              i = ccard[_i];
              ccard[i] = i;
            }
            for (_j = 0, _len1 = ccard.length, _step = 2; _j < _len1; _j += _step) {
              i = ccard[_j];
              ccard[i] = ccard[i] * 2;
              if (ccard[i] > 9) {
                ccard[i] = ccard[i] - 9;
              }
            }
            sum = ccard.reduce(function(x, y) {
              return x + y;
            });
            return (sum % 10) === 0;
          };
          if (number[0] === '4' && (number.length === 13 || number.length === 16)) {
            return luhn(number);
          }
          if (number[0] === '5' && number.length === 16 && (number[1] === '1' || number[1] === '5')) {
            return luhn(number);
          } else {
            return false;
          }
        };
        if (parseInt(number) && !checkNumber(attributes.number)) {
          return "Invalid number (not VISA or Mastercard)";
        }
        expire_date = Date.parse("" + attributes.expiration_month + "/1/" + attributes.expiration_year);
        today_date = new Date();
        if (expire_date - today_date <= 0) {
          return "Already expired credit card!";
        }
      }
    });
    return CreditCard;
  });

}).call(this);
