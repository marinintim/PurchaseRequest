// Generated by CoffeeScript 1.4.0
(function() {

  define("Models/PurchaseRequest", ["Models/Address", "Models/CreditCard"], function(Address, CreditCard) {
    var PurchaseRequest;
    return PurchaseRequest = Backbone.Model.extend({
      attributes: {
        credit_card: CreditCard,
        address: Address,
        billing_address: Address
      },
      initialize: function(options) {
        this.set('credit_card', new CreditCard({
          parent: this
        }));
        this.set('address', new Address({
          parent: this
        }));
        return this.set('billing_address', new Address({
          parent: this
        }));
      },
      url: "/orders",
      toJSON: function() {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        return {
          credit_card_id: (_ref = this.get('credit_card')) != null ? _ref.get('id') : void 0,
          billing_address_id: (_ref1 = this.get('billingAddress')) != null ? _ref1.get('id') : void 0,
          address_id: (_ref2 = this.get('address')) != null ? _ref2.get('id') : void 0,
          credit_card: (_ref3 = this.get('credit_card')) != null ? _ref3.toJSON() : void 0,
          address: (_ref4 = this.get('address')) != null ? _ref4.toJSON() : void 0,
          billing_address: (_ref5 = this.get('billing_address')) != null ? _ref5.toJSON() : void 0
        };
      },
      save: function(options) {
        var attr, attrs;
        attrs = {};
        if (options == null) {
          options = {};
        }
        for (attr in this.attributes) {
          if (this.get(attr).isNew()) {
            attrs[attr] = this.get(attr);
          } else {
            attrs[attr + "_id"] = this.get(attr).id;
          }
        }
        options.attrs = attrs;
        return Backbone.Model.prototype.save.call(this, attrs, options);
      },
      validate: function(attributes) {
        var error, name, value;
        if (attributes == null) {
          attributes = this.attributes;
        }
        error = "";
        for (name in attributes) {
          value = attributes[name];
          if (typeof value.validate === 'function' && value.validate()) {
            error += value.validate() + "<br>";
          }
        }
        if (error.length > 0) {
          return error;
        }
      }
    });
  });

}).call(this);
