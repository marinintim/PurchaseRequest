// Generated by CoffeeScript 1.4.0
(function() {

  define('Tests/spec/modelCreditCard', ['Models/CreditCard'], function(CreditCard) {
    'use strict';
    return describe('Models :: Nested :: Credit Card', function() {
      beforeEach(function() {
        this.cc = new CreditCard({
          parent: _.clone(Backbone.Events)
        });
        return this.myCard = {
          cardholder: 'Petr Ivanov',
          number: '4111 1111 1111 1111',
          expiration_month: '1',
          expiration_year: '25'
        };
      });
      it('should accept and validate properly data as correct', function() {
        this.cc.set(this.myCard);
        return expect(this.cc.isValid()).toBeTruthy();
      });
      it('should return error on invalid card number', function() {
        this.myCard.number = '4111 1111 hacker was here';
        this.cc.set(this.myCard);
        return expect(this.cc.validate()).toContain('invalid number');
      });
      it('should return error on expired date (month)', function() {
        this.myCard.expiration_year = (new Date().getFullYear() - 2000).toString();
        this.myCard.expiration_month = (new Date().getMonth()).toString();
        this.cc.set(this.myCard);
        return expect(this.cc.validate()).toContain('expired');
      });
      it('should return error on expired date (year)', function() {
        this.myCard.expiration_year = '13';
        this.cc.set(this.myCard);
        return expect(this.cc.validate()).toContain('expired');
      });
      it('should return error on full expired year as well as short', function() {
        this.myCard.expiration_year = '2013';
        this.cc.set(this.myCard);
        return expect(this.cc.validate()).toContain('expired');
      });
      it('should return error on empty card holder', function() {
        this.myCard.cardholder = '';
        this.cc.set(this.myCard);
        return expect(this.cc.validate()).toContain('Cardholder is empty');
      });
    });
  });

}).call(this);
